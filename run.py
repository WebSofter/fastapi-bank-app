#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import uvicorn
import asyncio
import httpx
import json
from app.main import app

async def test_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints"""
    base_url = "http://localhost:8000"
    
    async with httpx.AsyncClient() as client:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Banking API...")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–∞
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–∞...")
        bank_data = {
            "name": "–°–±–µ—Ä–±–∞–Ω–∫ –†–æ—Å—Å–∏–∏",
            "bik": "044525225",
            "correspondent_account": "30101810400000000225",
            "address": "–ú–æ—Å–∫–≤–∞, —É–ª. –í–∞–≤–∏–ª–æ–≤–∞, 19"
        }
        
        response = await client.post(f"{base_url}/banks/", json=bank_data)
        if response.status_code == 201:
            bank = response.json()
            bank_id = bank["id"]
            print(f"‚úÖ –ë–∞–Ω–∫ —Å–æ–∑–¥–∞–Ω: {bank['name']} (ID: {bank_id})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–∫–∞: {response.text}")
            return
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏...")
        company_data = {
            "name": "–û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è",
            "inn": "7707083893",
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API"
        }
        
        response = await client.post(f"{base_url}/companies/", json=company_data)
        if response.status_code == 201:
            company = response.json()
            company_id = company["id"]
            print(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {company['name']} (ID: {company_id})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {response.text}")
            return
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞...")
        account_data = {
            "account_number": "40702810200000000001",
            "company_id": company_id,
            "bank_id": bank_id,
            "currency": "RUB",
            "is_active": "Y"
        }
        
        response = await client.post(f"{base_url}/bank-accounts/", json=account_data)
        if response.status_code == 201:
            account = response.json()
            account_id = account["id"]
            print(f"‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {account['account_number']} (ID: {account_id})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞: {response.text}")
            return
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ —Å—á–µ—Ç–∞–º–∏
        print("\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ —Å—á–µ—Ç–∞–º–∏...")
        response = await client.get(f"{base_url}/companies/{company_id}")
        if response.status_code == 200:
            company_with_accounts = response.json()
            print(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {company_with_accounts['name']}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤: {len(company_with_accounts['bank_accounts'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {response.text}")
        
        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–∫–∞ —Å–æ —Å—á–µ—Ç–∞–º–∏
        print("\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–∫–∞ —Å–æ —Å—á–µ—Ç–∞–º–∏...")
        response = await client.get(f"{base_url}/banks/{bank_id}")
        if response.status_code == 200:
            bank_with_accounts = response.json()
            print(f"‚úÖ –ë–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω: {bank_with_accounts['name']}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤: {len(bank_with_accounts['bank_accounts'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–∫–∞: {response.text}")
        
        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞
        print("\n6. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞...")
        response = await client.get(f"{base_url}/bank-accounts/{account_id}")
        if response.status_code == 200:
            account_detail = response.json()
            print(f"‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –ø–æ–ª—É—á–µ–Ω: {account_detail['account_number']}")
            print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {account_detail['company']['name']}")
            print(f"   –ë–∞–Ω–∫: {account_detail['bank']['name']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞: {response.text}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Banking API —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000/docs")
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        asyncio.run(test_api())
    else:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        run_server()